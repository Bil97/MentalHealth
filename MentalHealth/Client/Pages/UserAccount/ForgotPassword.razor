@page "/user-profile/forgot-password"
<h3>Forgot Password</h3>

<div class="jumbotron">
    <EditForm Model="@_forgotPassword" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="input-group mt-3">
            <InputText type="text" class="form-control" @bind-Value="_forgotPassword.Email" placeholder="Enter your email" />
            <div class="input-group-append mb-1">
                <button type="submit" class="input-group-text btn btn-primary" disabled="@Submitting">Submit</button>
            </div>
        </div>
        <ValidationMessage For="()=>_forgotPassword.Email" />
    </EditForm>
</div>
@if (Error == true)
{
    <div class="alert alert-warning alert-dismissible">
        <button type="button" @onclick="() => { Error = null; }" class="close">&times;</button>
        @Response
    </div>
}
@if (Error == false)
{
    <div class="alert alert-success alert-dismissible">
        <button class="close" @onclick="() => { Error = null; }">&times;</button>
        @Response
    </div>
}

@code {
    private MentalHealth.Shared.Models.UserAccount.ForgotPassword _forgotPassword = new();
    private string Response { get; set; }
    private bool? Error { get; set; }
    private bool Submitting { get; set; }

    private async Task HandleValidSubmit()
    {
        try
        {
            Error = null;
            Submitting = true;
            var postResult = await _httpClient.PostAsJsonAsync($"api/ApplicationUsers/forgot-password", _forgotPassword);
            Submitting = false;
            Response = await postResult.Content.ReadAsStringAsync();
            Error = !postResult.IsSuccessStatusCode;
        }
        catch (Exception ex) { Submitting = false; Console.WriteLine(ex.Message); }
    }

}
