@page "/transaction/{ProfessionId}"
@page "/transaction/{ProfessionId}/{UserId}"
@attribute [Authorize]

<div class="card">
    <div class="card-body">
        <h3 class="text-center">Transaction</h3>
    </div>
</div>

@if (Profession == null)
{<div class="card">
        <div class="card-body">

            <em>Loading...</em>
        </div>
    </div>
}
else
{
    <div class="jumbotron">
        <h5>To consult @Profession.User.FullName you must pay pay a service fee of @(new CurrencyConverter(Profession.ServiceFee).Currency)</h5>

        @if (User != null && User?.Phonenumber.Length > 9)
        {
            var phonenumber = User.Phonenumber;
            if (phonenumber.StartsWith("0"))
                phonenumber = "254" + phonenumber.Remove(0, 1);
            if (phonenumber.StartsWith("+254"))
                phonenumber = "254" + phonenumber.Remove(0, 1);
            else if (!phonenumber.StartsWith("254"))
                phonenumber = "254" + phonenumber;

            <h6>Your number: @phonenumber</h6>

            <div class="input-group mt-3">
                <input type="text" class="form-control" @bind="phonenumber" disabled />
                <div class="input-group-append mb-1">
                    <button class="btn btn-primary" @onclick="Pay" disabled="@Submitting">
                        @if (Submitting)
                        {
                            <span>Please wait...</span>
                            <span class="spinner-border spinner-border-sm"></span>
                        }
                        else
                        {
                            <span>Pay with M-Pesa</span>
                        }
                    </button>
                </div>
            </div>
        }
        else
        {
            <p class="alert alert-danger">Your phone number is invalid</p>
        }

        @if (!string.IsNullOrEmpty(Response))
        {
            @if (Error == true)
            {
                <div class="alert alert-warning alert-dismissible">
                    <button type="button" @onclick="(() => { Error = null; })" class="close">&times;</button>
                    @Response
                </div>
            }
            @if (Error == false)
            {
                <div class="alert alert-success alert-dismissible">
                    <button class="close" @onclick="(() => { Error = null; })">&times;</button>
                    @Response
                </div>
            }
        }
    </div>
}

<br />

@code {
    [Parameter]
    public string ProfessionId { get; set; }
    [Parameter]
    public string UserId { get; set; }
    private UserProfession Profession { get; set; }
    private UserDetails User { get; set; }
    private bool? Error { get; set; }
    private bool Submitting { get; set; }
    private string Response { get; set; }
    private SessionRecord _sessionRecord = new();

    protected override async Task OnInitializedAsync()
    {
        await GetProfession();

        if (Profession?.ServiceFee == 0 && Profession?.ServiceFeePaid == false)
            await Pay();
        if (Profession?.ServiceFeePaid == true)
            await GetSessionId();
        else
            await GetUser();
    }

    private async Task GetProfession()
    {
        try
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity != null)
            {
                Profession = await _httpClient.GetFromJsonAsync<UserProfession>($"api/professions/professionid/{ProfessionId}");
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }

    }

    private async Task GetUser()
    {
        try
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity != null)
            {
                var result = await _httpClient.GetAsync($"api/ApplicationUsers/{authState.User.Identity.Name}");

                if (!result.IsSuccessStatusCode)
                {
                    Response = await result.Content.ReadAsStringAsync();
                    Error = true;
                }
                else
                {
                    Error = null;
                    using var stream = await result.Content.ReadAsStreamAsync();
                    User = await System.Text.Json.JsonSerializer.DeserializeAsync<UserDetails>(stream, new System.Text.Json.JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                    });
                }
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task GetSessionId()
    {
        try
        {
            string userId;

            var content = new MultipartFormDataContent();

            content.Add(new StringContent(ProfessionId, Encoding.UTF8, "application/json"), "professionId");
            if (string.IsNullOrWhiteSpace(UserId))
            {
                userId = Profession.UserId;
                content.Add(new StringContent(Profession.UserId, Encoding.UTF8, "application/json"), "userId");
            }
            else
            {
                userId = UserId;
                content.Add(new StringContent(UserId, Encoding.UTF8, "application/json"), "userId");
            }
            var result = await _httpClient.PostAsync($"api/HealthRecord", content);

            if (!result.IsSuccessStatusCode)
            {
                Response = await result.Content.ReadAsStringAsync();
                Error = true;
            }
            else
            {
                var sessionId = await result.Content.ReadAsStringAsync();
                _navigation.NavigateTo($"chat/{Profession.User.Id}/{sessionId}");
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task Pay()
    {
        try
        {
            Submitting = true;
            _sessionRecord = new SessionRecord
            {
                ProfessionId = Profession.Id
            };
            var result = await _httpClient.PostAsJsonAsync<SessionRecord>("api/HealthRecords/pay", _sessionRecord);
            if (result.IsSuccessStatusCode)
            {
                var sessionId = await result.Content.ReadAsStringAsync();
                _navigation.NavigateTo($"chat/{Profession.User.Id}/{sessionId}");
            }
            else
            {
                Submitting = false;
                Error = true;
                Response = await result.Content.ReadAsStringAsync();
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Submitting = false;
            Console.WriteLine("Error: " + ex.Message);
        }
    }

}
